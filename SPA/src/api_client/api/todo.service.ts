/**
 * My Space API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PostTodo } from '../model/postTodo';
import { Todo } from '../model/todo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TodoService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add Todo
     * 
     * @param body todo data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTodo(body?: PostTodo, observe?: 'body', reportProgress?: boolean): Observable<Todo>;
    public addTodo(body?: PostTodo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Todo>>;
    public addTodo(body?: PostTodo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Todo>>;
    public addTodo(body?: PostTodo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Todo>(`${this.basePath}/Todo`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete todo
     * 
     * @param todoID TodoID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deltodo(todoID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deltodo(todoID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deltodo(todoID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deltodo(todoID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (todoID === null || todoID === undefined) {
            throw new Error('Required parameter todoID was null or undefined when calling deltodo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/Todo/${encodeURIComponent(String(todoID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param todoID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public finishTodo(todoID: number, observe?: 'body', reportProgress?: boolean): Observable<Todo>;
    public finishTodo(todoID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Todo>>;
    public finishTodo(todoID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Todo>>;
    public finishTodo(todoID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (todoID === null || todoID === undefined) {
            throw new Error('Required parameter todoID was null or undefined when calling finishTodo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Todo>(`${this.basePath}/Todo/${encodeURIComponent(String(todoID))}/Done`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Todo
     * 
     * @param todoID Todo ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTodo(todoID: number, observe?: 'body', reportProgress?: boolean): Observable<Todo>;
    public getTodo(todoID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Todo>>;
    public getTodo(todoID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Todo>>;
    public getTodo(todoID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (todoID === null || todoID === undefined) {
            throw new Error('Required parameter todoID was null or undefined when calling getTodo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Todo>(`${this.basePath}/Todo/${encodeURIComponent(String(todoID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get todo List
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTodoList(observe?: 'body', reportProgress?: boolean): Observable<Array<Todo>>;
    public getTodoList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Todo>>>;
    public getTodoList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Todo>>>;
    public getTodoList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Todo>>(`${this.basePath}/Todo/List`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get todos by Category ID
     * 
     * @param categoryID CategoryID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTodoListByCategory(categoryID: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Todo>>;
    public getTodoListByCategory(categoryID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Todo>>>;
    public getTodoListByCategory(categoryID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Todo>>>;
    public getTodoListByCategory(categoryID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categoryID === null || categoryID === undefined) {
            throw new Error('Required parameter categoryID was null or undefined when calling getTodoListByCategory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Todo>>(`${this.basePath}/Todo/Category/${encodeURIComponent(String(categoryID))}/List`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Save todo
     * 
     * @param todoID Todo ID
     * @param body Todo Data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTodo(todoID: number, body?: Todo, observe?: 'body', reportProgress?: boolean): Observable<Todo>;
    public updateTodo(todoID: number, body?: Todo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Todo>>;
    public updateTodo(todoID: number, body?: Todo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Todo>>;
    public updateTodo(todoID: number, body?: Todo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (todoID === null || todoID === undefined) {
            throw new Error('Required parameter todoID was null or undefined when calling updateTodo.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Todo>(`${this.basePath}/Todo/${encodeURIComponent(String(todoID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
